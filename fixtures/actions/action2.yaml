name: Dev Deployment to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY_BASE: us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}

jobs:
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout Repository
  #     uses: actions/checkout@v3

  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: '7' 

  #   - name: Restore Dependencies
  #     run: dotnet restore

  #   - name: Build
  #     run: dotnet build --configuration Release

  build:
    # needs: ["test"]
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v3

      - id: auth
        name: "Authenticate to Google Cloud"
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          token_format: access_token

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: us-east1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: GenAIHealth-API/GenAIHealth-API
          push: true
          provenance: false
          tags: |
            ${{ env.REGISTRY_BASE }}/${{ vars.GCP_APP_PROJECT_NAME }}/${{ vars.GCP_SERVICE_NAME_DEV }}:${{ github.sha }}

  deploy:
    needs: ["build"]
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v3

      - id: auth
        name: "Authenticate to Google Cloud"
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup env
        env:
          IMAGE: ${{ env.REGISTRY_BASE }}/${{ vars.GCP_APP_PROJECT_NAME }}/${{ vars.GCP_SERVICE_NAME_DEV }}:${{ github.sha }}
          SERVICE_NAME: ${{ vars.GCP_SERVICE_NAME_DEV }}
          REGION: ${{ vars.GCP_REGION }}
          CPU: 2000m
          MEMORY: 1024Mi
          maxScale: "1"
          minScale: "0"
          containerConcurrency: 100
          ingress: all
          SERVICE_ACCOUNT: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          VPC_ACCESS_CONNECTOR: ${{ secrets.GCP_VPC_CONNECTOR }}
          DB_INSTANCES: ${{secrets.DB_INSTANCE_NAME_DEV}}
          DB_HOST: ${{secrets.DB_HOST_DEV}}
          DB_USERNAME: ${{secrets.DB_USERNAME_DEV}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD_DEV}}
          DB_NAME: ${{secrets.DB_NAME_DEV}}
          GOOGLE_CLIENT_SECRET: ${{secrets.GOOGLE_CLIENT_SECRET}}
          GOOGLE_CLIENT_ID: ${{secrets.GOOGLE_CLIENT_ID}}
          JWT_SECURITY_KEY: ${{secrets.JWT_SECURITY_KEY}}
          JWT_DURATION_TIME: ${{secrets.JWT_DURATION_TIME}}
          ASPNETCORE_ENVIRONMENT: Development
          ENGINE_URL_ENDPOINT: ${{ secrets.API_URL_DEV }}
        run: eval "echo \"$(cat service.yaml)\"" > service.yaml

      - name: Deploy
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          metadata: service.yaml
          region: ${{ vars.GCP_REGION }}

      - id: Test
        run: curl "${{ steps.deploy.outputs.url }}"